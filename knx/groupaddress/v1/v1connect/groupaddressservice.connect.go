// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: knx/groupaddress/v1/groupaddressservice.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/choopm/knxrpc/knx/groupaddress/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GroupAddressServiceName is the fully-qualified name of the GroupAddressService service.
	GroupAddressServiceName = "knx.groupaddress.v1.GroupAddressService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GroupAddressServicePublishProcedure is the fully-qualified name of the GroupAddressService's
	// Publish RPC.
	GroupAddressServicePublishProcedure = "/knx.groupaddress.v1.GroupAddressService/Publish"
	// GroupAddressServiceSubscribeProcedure is the fully-qualified name of the GroupAddressService's
	// Subscribe RPC.
	GroupAddressServiceSubscribeProcedure = "/knx.groupaddress.v1.GroupAddressService/Subscribe"
	// GroupAddressServiceSubscribeUnaryProcedure is the fully-qualified name of the
	// GroupAddressService's SubscribeUnary RPC.
	GroupAddressServiceSubscribeUnaryProcedure = "/knx.groupaddress.v1.GroupAddressService/SubscribeUnary"
)

// GroupAddressServiceClient is a client for the knx.groupaddress.v1.GroupAddressService service.
type GroupAddressServiceClient interface {
	// Publish publishes a single message to the bus
	Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error)
	// Subscribe watches the KNX bus for messages targeting group address(es).
	// Bus messages are delivered as streamed responses. It is up to you to react
	// on a message or ignore it.
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.ServerStreamForClient[v1.SubscribeResponse], error)
	// SubscribeUnary watches the KNX bus for messages targeting group address(es).
	// Bus messages are delivered as an array of wrapped streamed responses.
	// It is up to you to react on a message or ignore it.
	SubscribeUnary(context.Context, *connect.Request[v1.SubscribeUnaryRequest]) (*connect.Response[v1.SubscribeUnaryResponse], error)
}

// NewGroupAddressServiceClient constructs a client for the knx.groupaddress.v1.GroupAddressService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGroupAddressServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GroupAddressServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	groupAddressServiceMethods := v1.File_knx_groupaddress_v1_groupaddressservice_proto.Services().ByName("GroupAddressService").Methods()
	return &groupAddressServiceClient{
		publish: connect.NewClient[v1.PublishRequest, v1.PublishResponse](
			httpClient,
			baseURL+GroupAddressServicePublishProcedure,
			connect.WithSchema(groupAddressServiceMethods.ByName("Publish")),
			connect.WithClientOptions(opts...),
		),
		subscribe: connect.NewClient[v1.SubscribeRequest, v1.SubscribeResponse](
			httpClient,
			baseURL+GroupAddressServiceSubscribeProcedure,
			connect.WithSchema(groupAddressServiceMethods.ByName("Subscribe")),
			connect.WithClientOptions(opts...),
		),
		subscribeUnary: connect.NewClient[v1.SubscribeUnaryRequest, v1.SubscribeUnaryResponse](
			httpClient,
			baseURL+GroupAddressServiceSubscribeUnaryProcedure,
			connect.WithSchema(groupAddressServiceMethods.ByName("SubscribeUnary")),
			connect.WithClientOptions(opts...),
		),
	}
}

// groupAddressServiceClient implements GroupAddressServiceClient.
type groupAddressServiceClient struct {
	publish        *connect.Client[v1.PublishRequest, v1.PublishResponse]
	subscribe      *connect.Client[v1.SubscribeRequest, v1.SubscribeResponse]
	subscribeUnary *connect.Client[v1.SubscribeUnaryRequest, v1.SubscribeUnaryResponse]
}

// Publish calls knx.groupaddress.v1.GroupAddressService.Publish.
func (c *groupAddressServiceClient) Publish(ctx context.Context, req *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error) {
	return c.publish.CallUnary(ctx, req)
}

// Subscribe calls knx.groupaddress.v1.GroupAddressService.Subscribe.
func (c *groupAddressServiceClient) Subscribe(ctx context.Context, req *connect.Request[v1.SubscribeRequest]) (*connect.ServerStreamForClient[v1.SubscribeResponse], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// SubscribeUnary calls knx.groupaddress.v1.GroupAddressService.SubscribeUnary.
func (c *groupAddressServiceClient) SubscribeUnary(ctx context.Context, req *connect.Request[v1.SubscribeUnaryRequest]) (*connect.Response[v1.SubscribeUnaryResponse], error) {
	return c.subscribeUnary.CallUnary(ctx, req)
}

// GroupAddressServiceHandler is an implementation of the knx.groupaddress.v1.GroupAddressService
// service.
type GroupAddressServiceHandler interface {
	// Publish publishes a single message to the bus
	Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error)
	// Subscribe watches the KNX bus for messages targeting group address(es).
	// Bus messages are delivered as streamed responses. It is up to you to react
	// on a message or ignore it.
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest], *connect.ServerStream[v1.SubscribeResponse]) error
	// SubscribeUnary watches the KNX bus for messages targeting group address(es).
	// Bus messages are delivered as an array of wrapped streamed responses.
	// It is up to you to react on a message or ignore it.
	SubscribeUnary(context.Context, *connect.Request[v1.SubscribeUnaryRequest]) (*connect.Response[v1.SubscribeUnaryResponse], error)
}

// NewGroupAddressServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGroupAddressServiceHandler(svc GroupAddressServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	groupAddressServiceMethods := v1.File_knx_groupaddress_v1_groupaddressservice_proto.Services().ByName("GroupAddressService").Methods()
	groupAddressServicePublishHandler := connect.NewUnaryHandler(
		GroupAddressServicePublishProcedure,
		svc.Publish,
		connect.WithSchema(groupAddressServiceMethods.ByName("Publish")),
		connect.WithHandlerOptions(opts...),
	)
	groupAddressServiceSubscribeHandler := connect.NewServerStreamHandler(
		GroupAddressServiceSubscribeProcedure,
		svc.Subscribe,
		connect.WithSchema(groupAddressServiceMethods.ByName("Subscribe")),
		connect.WithHandlerOptions(opts...),
	)
	groupAddressServiceSubscribeUnaryHandler := connect.NewUnaryHandler(
		GroupAddressServiceSubscribeUnaryProcedure,
		svc.SubscribeUnary,
		connect.WithSchema(groupAddressServiceMethods.ByName("SubscribeUnary")),
		connect.WithHandlerOptions(opts...),
	)
	return "/knx.groupaddress.v1.GroupAddressService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GroupAddressServicePublishProcedure:
			groupAddressServicePublishHandler.ServeHTTP(w, r)
		case GroupAddressServiceSubscribeProcedure:
			groupAddressServiceSubscribeHandler.ServeHTTP(w, r)
		case GroupAddressServiceSubscribeUnaryProcedure:
			groupAddressServiceSubscribeUnaryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGroupAddressServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGroupAddressServiceHandler struct{}

func (UnimplementedGroupAddressServiceHandler) Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("knx.groupaddress.v1.GroupAddressService.Publish is not implemented"))
}

func (UnimplementedGroupAddressServiceHandler) Subscribe(context.Context, *connect.Request[v1.SubscribeRequest], *connect.ServerStream[v1.SubscribeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("knx.groupaddress.v1.GroupAddressService.Subscribe is not implemented"))
}

func (UnimplementedGroupAddressServiceHandler) SubscribeUnary(context.Context, *connect.Request[v1.SubscribeUnaryRequest]) (*connect.Response[v1.SubscribeUnaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("knx.groupaddress.v1.GroupAddressService.SubscribeUnary is not implemented"))
}
